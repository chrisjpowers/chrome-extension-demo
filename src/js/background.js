// Generated by CoffeeScript 1.3.3
(function() {
  var persist, raw, saveImage, savedImages;

  if (raw = localStorage.getItem("savedImages")) {
    savedImages = JSON.parse(raw);
  } else {
    savedImages = {};
  }

  persist = function() {
    return localStorage.setItem("savedImages", JSON.stringify(savedImages));
  };

  saveImage = function(img) {
    img.saved = true;
    savedImages[img.src] = img;
    return persist();
  };

  chrome.extension.onMessage.addListener(function(payload, sender, cb) {
    switch (payload._action) {
      case "fetchImages":
        chrome.tabs.getSelected(null, function(tab) {
          var img, key, out;
          if (/^chrome/.test(tab.url)) {
            out = [];
            for (key in savedImages) {
              img = savedImages[key];
              out.push(img);
            }
            return cb([null, out]);
          } else {
            return chrome.tabs.sendMessage(tab.id, {
              _action: "fetchImages"
            }, function(payload) {
              var err, keys, pageImages;
              err = payload[0], pageImages = payload[1];
              keys = Object.keys(savedImages);
              pageImages = _(pageImages).reject(function(img) {
                return _(keys).include(img.src);
              });
              for (key in savedImages) {
                img = savedImages[key];
                pageImages.push(img);
              }
              return cb([err, pageImages]);
            });
          }
        });
        return true;
      case "saveImage":
        return saveImage(payload);
      case "unsaveImage":
        delete savedImages[payload.src];
        return persist();
    }
  });

}).call(this);
